AC_INIT(vidalia,0.0.9-svn)
AC_MSG_NOTICE([Configuring AC_PACKAGE_STRING...])
AC_PROG_CXX
PROFILE="Vidalia.pro"

# Find Qt or use one specified to ./configure
AC_ARG_WITH([qt-dir],
  AC_HELP_STRING([--with-qt-dir=/path/to/Qt],
                 [Path to Qt 4.1.0 or later.]),
  [QTPATHS="$withval"],
  [ # There can be multiple versions of Qt under these directories
    QTPATHS="/usr/local/Trolltech /usr/Trolltech /usr"
    VERLIST=`ls -rm /usr/local/Trolltech/ 2> /dev/null | sed -e s/,//`
    for ver in $VERLIST; do
      QTPATHS="$QTPATHS /usr/local/Trolltech/$ver"
    done
    VERLIST=`ls -rm /usr/Trolltech/ 2> /dev/null | sed -e s/,//`
    for ver in $VERLIST; do
      QTPATHS="$QTPATHS /usr/Trolltech/$ver"
    done
  ])

AC_MSG_CHECKING([for Qt >= 4.1.0])
for path in $QTPATHS; do
  # "qmake" is sometimes spelled "qmake-qt4"
  # QMAKE=""
  if test -x $path/bin/qmake; then
    QMAKE=$path/bin/qmake
  else
    if test -x $path/bin/qmake-qt4; then
      QMAKE=$path/bin/qmake-qt4
    fi
  fi
  if test x$QMAKE != x; then
    # Ask qmake if we have the right version
    QTVERSION=`$QMAKE -query QT_VERSION`
    case $QTVERSION in
      4.1.*)
        QTDIR=$path
        break
        ;;
      *);;
    esac
  fi
done
if test x$QTDIR = x; then
  AC_MSG_RESULT([no])
  AC_MSG_ERROR([Vidalia requires Qt 4.1.0 or greater.])
else
 AC_MSG_RESULT($QTVERSION)
fi

# Check for lrelease
AC_MSG_CHECKING([for lrelease])
if test -x $QTDIR/bin/lrelease; then
  LRELEASE=$QTDIR/bin/lrelease
  AC_MSG_RESULT([$LRELEASE])
else
  # lrelease wasn't in our $QTSIR, so check our path
  AC_PATH_PROG(LRELEASE, lrelease)
  if test x$LRELEASE = x; then
    AC_MSG_ERROR([lrelease not found])
  else
    AC_MSG_NOTICE([no lrelease found in $QTDIR/bin. Using $LRELEASE.])
  fi
fi

# Find chmod
AC_PATH_PROG(CHMOD, chmod, chmod)

# Determine whether we should link to the debug versions of Qt or not
BUILDMODE="debug"
AC_ARG_ENABLE(debug,
    AC_HELP_STRING(--disable-debug, Disable debugging support))
if test x$enable_debug = xno; then
  BUILDMODE="release"
fi
AC_MSG_NOTICE([Building in $BUILDMODE mode])

# Clean out an existing Makefile
AC_CHECK_FILE(Makefile, [rm Makefile])

# Substitute the version number in places that need it
AC_SUBST(VERSION, AC_PACKAGE_VERSION)
DOCS="doc"
OSXBUNDLE="pkg/osx/bundle"
OSXDMG="pkg/osx"
AC_OUTPUT([$DOCS/vidalia.1                    \
           $DOCS/Doxyfile                     \
           $OSXDMG/builddmg.sh                \
           $OSXBUNDLE/buildmpkg.sh            \
           $OSXBUNDLE/VidaliaBundleDesc.plist \
           $OSXBUNDLE/VidaliaBundleInfo.plist \
           $OSXBUNDLE/VidaliaDesc.plist       \
           $OSXBUNDLE/VidaliaInfo.plist])

# Make the mpkg and dmg scripts executable
if test x$CHMOD != x; then
  $CHMOD u+x $OSXBUNDLE/buildmpkg.sh
fi
if test x$CHMOD != x; then
  $CHMOD u+x $OSXDMG/builddmg.sh
fi

# Build the translations
AC_MSG_NOTICE([Processing language translations...])
$LRELEASE $PROFILE

# Make sure ${prefix} (which can be contained in $mandir) is evaluted 
# before passing it to qmake
MANPAGEDIR=`eval echo $mandir`

# Run qmake to generate the Makefile
AC_MSG_NOTICE([Running qmake...])
$QMAKE -config $BUILDMODE PREFIX=$prefix MANDIR=$MANPAGEDIR $PROFILE

